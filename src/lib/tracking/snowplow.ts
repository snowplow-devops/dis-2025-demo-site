// Automatically generated by Snowtype

/**
 * Schema for an Ecommerce action
 */
export interface SnowplowEcommerceAction {
    /**
     * The name of the list presented to the user E.g. product list, search results, shop the
     * look, frequently bought with.
     */
    name?: null | string;
    /**
     * Standard ecommerce actions.
     */
    type: Type;
}

/**
 * Standard ecommerce actions.
 */
export type Type = "add_to_cart" | "remove_from_cart" | "product_view" | "list_click" | "list_view" | "promo_click" | "promo_view" | "checkout_step" | "transaction" | "refund" | "trns_error";

/**
 * Schema for a transaction entity in Ecommerce
 */
export interface Transaction {
    /**
     * Whether the transaction is a credit order or not.
     */
    credit_order?: boolean | null;
    /**
     * The currency used for the transaction (ISO 4217).
     */
    currency: string;
    /**
     * Discount amount taken off.
     */
    discount_amount?: number | null;
    /**
     * Discount code used.
     */
    discount_code?: null | string;
    /**
     * The payment method used for the transaction.
     */
    payment_method: string;
    /**
     * The revenue of the transaction.
     */
    revenue: number;
    /**
     * Total cost of shipping on the transaction.
     */
    shipping?: number | null;
    /**
     * Total amount of tax on the transaction.
     */
    tax?: number | null;
    /**
     * Total quantity of items in the transaction.
     */
    total_quantity: number;
    /**
     * The ID of the transaction.
     */
    transaction_id: string;
}

/**
 * Schema for a product entity in Ecommerce
 */
export interface Product {
    /**
     * The brand of the product.
     */
    brand?: null | string;
    /**
     * The category the product belongs to. Use a consistent separator to express multiple
     * levels. E.g. Woman/Shoes/Sneakers
     */
    category: string;
    /**
     * Identifier/Name/Url for the creative presented on a list or product view.
     */
    creative_id?: null | string;
    /**
     * The currency in which the product is being priced (ISO 4217).
     */
    currency: string;
    /**
     * The SKU or product ID.
     */
    id: string;
    /**
     * The inventory status of the product E.g. in stock, out of stock, preorder, backorder.
     */
    inventory_status?: null | string;
    /**
     * The list or recommended retail price of a product.
     */
    list_price?: number | null;
    /**
     * The name or title of the product.
     */
    name?: null | string;
    /**
     * The position the product was presented in a list of products E.g. search results, product
     * list page.
     */
    position?: number | null;
    /**
     * The price of the product at the current time.
     */
    price: number;
    /**
     * The quantity of the product taking part in the ecommerce action.
     */
    quantity?: number | null;
    /**
     * The size of the product.
     */
    size?: null | string;
    /**
     * The variant of the product.
     */
    variant?: null | string;
}

import { trackSelfDescribingEvent, CommonEventProperties, SelfDescribingJson } from '@snowplow/browser-tracker';

/**
 * Creates a Snowplow Event Specification entity.
 */
export function createEventSpecification(eventSpecification: EventSpecification){
    return {
        schema:
            'iglu:com.snowplowanalytics.snowplow/event_specification/jsonschema/1-0-2',
        data: eventSpecification,
    }
}

/**
 * Automatically attached context for event specifications
 */
interface EventSpecification {
    id: string;
    name: string;
    data_product_id: string;
    data_product_name: string;
}


/**
 * Track a Snowplow event for SnowplowEcommerceAction.
 * Schema for an Ecommerce action
 */
export function trackSnowplowEcommerceAction<T extends {} = any>(snowplowEcommerceAction: SnowplowEcommerceAction & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = snowplowEcommerceAction;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snplow.dis.ecommerce/snowplow_ecommerce_action/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow SnowplowEcommerceAction entity.
 */
export function createSnowplowEcommerceAction(snowplowEcommerceAction: SnowplowEcommerceAction){
    return {
        schema: 'iglu:com.snplow.dis.ecommerce/snowplow_ecommerce_action/jsonschema/1-0-0',
        data: snowplowEcommerceAction
    }
}
/**
 * Track a Snowplow event for Transaction.
 * Schema for a transaction entity in Ecommerce
 */
export function trackTransaction<T extends {} = any>(transaction: Transaction & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = transaction;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snplow.dis.ecommerce/transaction/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Transaction entity.
 */
export function createTransaction(transaction: Transaction){
    return {
        schema: 'iglu:com.snplow.dis.ecommerce/transaction/jsonschema/1-0-0',
        data: transaction
    }
}
/**
 * Track a Snowplow event for Product.
 * Schema for a product entity in Ecommerce
 */
export function trackProduct<T extends {} = any>(product: Product & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = product;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snplow.dis.ecommerce/product/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Product entity.
 */
export function createProduct(product: Product){
    return {
        schema: 'iglu:com.snplow.dis.ecommerce/product/jsonschema/1-0-0',
        data: product
    }
}

/**
 * Tracks a Transaction event specification.
 * ID: f56d6f3c-05fa-4f35-a0d5-07fcd0758fe7
 */
export function trackTransactionSpec(transaction: SnowplowEcommerceAction & CommonEventProperties<Transaction | Product>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'f56d6f3c-05fa-4f35-a0d5-07fcd0758fe7',
        name: 'Transaction',
        data_product_id: '19e97ccb-e46b-4962-99dc-410efe61ce1c',
        data_product_name: 'Snowshoes Retail Ecommerce'
    });

    const context = Array.isArray(transaction.context)
        ? [...transaction.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedTransaction = {
        ...transaction,
        context,
    };

    trackSnowplowEcommerceAction<Transaction | Product | EventSpecification>(modifiedTransaction, trackers);
}

